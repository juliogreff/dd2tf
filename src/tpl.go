// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tmpl/monitor.tmpl
// tmpl/screenboard.tmpl
// tmpl/timeboard.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\xe2\x30\x10\xc6\xef\x79\x8a\x51\xce\xbb\x3c\x41\x39\xac\x5a\x56\xe5\xb0\xa0\xad\x90\x7a\x58\xad\x2c\x2b\x1e\x88\xd5\x60\x53\xc7\x21\x42\x5e\xbf\xfb\xca\xff\x20\x4e\x4d\xcb\x29\xfe\xbe\x6f\x7e\x99\x4c\x26\x28\xec\xe5\xa0\x1a\x84\x9a\x51\x4d\x99\x3c\x90\xa3\x14\x5c\x4b\x55\x43\xcd\x18\x31\x06\x16\x6b\x06\xd6\xd6\x60\x2a\x00\x41\x8f\x08\xf9\x6f\x09\xb5\x0b\x6d\x9c\x63\x6d\x5d\x01\xe8\xcb\xe9\x4e\x68\xe7\x9c\x10\x32\xe6\x3b\xf0\x3d\x2c\x76\xf4\xd0\x83\xb5\xae\xcc\x5d\xcd\xcb\xfe\x18\xa3\xa8\x38\x60\x08\x5a\x5b\x1b\xb3\xb0\xb6\xfe\x66\x0c\x0a\x66\xed\xdf\x48\x42\xc1\x02\xe4\x88\x7d\x4f\x0f\x98\x43\x1e\x1e\x56\xdb\x5d\xe5\x1a\xf8\x15\x6d\x6b\x2b\x27\x01\x60\xdf\xd0\x8e\x6a\x2e\x05\x49\xa5\xd3\xfc\xf6\xe4\xac\x7e\xb1\xba\xc6\x66\x84\x0a\xe0\x7d\x40\x75\x81\x25\xb8\xfc\x6f\x7f\xfd\xcf\x63\x4f\xf8\xd8\x52\x45\x1b\x8d\xca\x3f\x61\x6c\x75\xe4\xba\xbd\x82\x43\xd3\x69\x16\x1b\xa9\xf9\xfe\xb2\x91\x4f\x54\xd3\xe0\x08\xaf\x10\x21\x89\x7b\x3b\xe1\x69\xfc\xb4\x3f\x24\xb3\x29\x24\xe0\x0b\x06\xc0\x5a\x68\x54\x67\xda\x05\x57\x45\x95\xf0\x24\x07\x68\x39\x5d\x04\x87\xfb\xff\x18\x18\xd7\x59\xa3\xd4\x2b\xd3\x1e\x27\x99\x22\x69\xc7\x8f\x28\x07\xfd\x1c\x77\x20\x9c\x48\x1b\x19\xb9\x5b\x04\xac\x45\xd3\x0d\x0c\x6f\x7b\xc4\x83\x40\xfc\x3e\x05\xcc\x34\xf3\xe9\xb8\xde\x07\xae\xf0\xe7\xd0\x75\xaf\x5c\x30\x39\xa6\x79\x79\x99\xec\x87\xae\x23\x63\x30\xd2\xc4\x8a\x05\xe5\x91\xe1\xf8\x2c\x7b\xfd\x84\x1d\xbd\xc4\x99\xe1\x48\x5a\xd9\x6b\xc2\xbc\x16\xa7\xf6\x21\x56\xa4\xad\xce\xb4\x1b\xfc\x42\x4e\x92\x78\x15\x33\x64\x31\x3b\xa1\x4e\xdf\x46\xab\xb0\x6f\x65\xc7\x26\x9b\x19\x16\x76\xee\xe8\xdb\x79\xe9\xff\x1a\x6e\x90\xed\x5b\x88\x00\xc8\xb7\xd8\xc2\x4d\xca\x9e\xe6\x56\xf3\x4a\x95\xe0\xe2\x90\xe4\x31\x1e\x43\xf5\xcc\xfc\x1c\xf1\x82\x8d\x3c\xbb\xaf\x30\x47\x11\x95\xf4\x8c\x39\x4f\xdf\x61\x3f\x2a\xae\x79\x93\x3e\x09\x80\x26\x9d\x03\x6c\x6e\x7f\x41\x99\xdf\x34\xd1\xe6\x3d\xde\xcb\x67\xf8\xe2\x8a\x94\x0e\x95\xfd\x1f\x00\x00\xff\xff\xbc\x75\x2f\x1b\xec\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1516, mode: os.FileMode(420), modTime: time.Unix(1573635454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xd9\x52\xe4\x3a\x12\x7d\xe7\x2b\x14\xf5\x3c\x4d\x7f\x01\x0f\x34\xf4\x42\x04\x4c\x33\x14\x4d\xcf\x12\x13\x0e\x61\x67\xb9\x14\xd8\x56\xb5\x24\x17\x14\x35\xfe\xf7\x09\xed\x29\x97\xb7\xbe\x71\x2f\x2f\x94\xce\x49\x9d\xd4\x92\x4e\x6d\x02\x24\x6f\x45\x0e\x64\x55\x50\x45\x0b\x5e\x66\x32\x17\x00\xcd\x33\xa7\xa2\x58\x91\x55\x51\x64\xc7\x23\x39\xbf\x29\x48\xd7\xad\xc8\xf1\x8c\x10\xc5\x54\x05\xe4\x82\xac\x34\xfe\x68\x0a\x5d\xb7\x3a\x23\xe4\x78\xfc\x40\xd8\x86\x9c\x3f\x00\x2d\xbe\x37\xd5\x81\x74\xdd\x19\x21\x02\x68\x91\x71\x5d\xbc\x20\xba\x46\xca\xea\x3a\xd0\x14\xb1\xa0\x05\xd6\x5b\x2a\xc0\x61\xd2\xfe\xb6\x75\x31\x31\x58\xf3\x11\xea\x5d\x45\x15\x3c\x51\xc1\xe8\x73\x05\x32\xd2\xaf\x4c\x6d\x27\x0d\x04\x6d\x4a\x20\xe7\x16\x50\xce\x2e\xdb\x3b\x43\xd3\x75\x42\x1a\x5a\x83\xfe\xef\xba\xff\x77\x5d\xb4\xbd\x27\x64\x27\x60\xc3\xde\x02\x77\x6f\x8b\x9e\x2d\x60\x43\xdb\x4a\x79\xf6\xda\x15\x2d\x3d\xd8\xa1\xa1\x42\xd2\x99\x9f\xac\x28\x41\x8d\x75\xe1\xd5\xb0\xae\xdd\xea\xb0\x8b\x73\xa6\x7f\xfb\x66\xbd\x79\xf4\x9f\x01\x3a\x78\xe8\x5f\x01\x0a\xe3\xeb\xa6\xdb\x6a\x9e\x04\xc2\x23\xbc\xa9\xa4\x4e\xe8\x42\x4f\xe2\xb2\x62\x65\x93\xe8\x64\xd4\x40\x58\xcd\x1b\xcd\xcb\xad\xd9\x7b\xda\xaa\x4c\x6a\x04\x8b\x39\x93\x49\xad\x6f\xc0\xca\xad\xf2\xe8\xd6\x96\x9c\x48\xe0\x26\x15\x7e\xb2\x42\x6d\x3d\xf8\x6a\x0a\xae\xbe\x67\xa6\x3b\x63\xc7\xcf\xf6\x43\xff\xf6\x3d\x58\x30\xae\x57\xbc\xe2\xc2\x83\xb9\x29\xb8\xda\x9e\x99\x19\xc7\x1a\x30\xe6\x3e\x17\x84\x2a\xfd\xdb\x46\x13\x21\x15\xdb\x43\x26\x77\x34\xcc\xd8\x2d\xdb\xc3\x5a\x97\xbd\x9f\x6e\xcc\xdb\xa0\xf3\x0a\xae\x61\x33\xe4\x3f\x21\x14\xab\x20\x2b\x60\x13\x9a\xe1\x05\x9e\xd8\xbb\xb7\x21\x64\xcf\xde\x7d\xab\x2c\xbe\x42\xd6\xc8\x3b\x1a\xbb\x56\x2a\x5e\xff\x68\x98\x8a\x5c\x6e\xb0\xac\xd5\xa0\x1f\x48\x6c\x36\x2b\x7a\xd9\x2a\x2e\x73\x1a\xbf\x17\x42\x68\x80\x9c\x22\xb6\x99\x15\xd4\x51\x90\x7c\x38\x36\x48\x7a\x5f\x0e\x32\x9a\x55\x7c\x80\x5f\x2d\x48\x9f\x41\xd2\xa1\x1f\xe6\x92\x0c\xa3\xff\x84\x35\x0b\x33\x12\xc5\xff\xd1\x82\x38\x44\x43\x42\x7e\xf9\x36\x7a\x66\x95\xd4\x49\x5a\x88\x7a\x6d\xb3\x55\xc0\x47\x33\xd9\x8c\x8e\x71\xda\x17\xfb\xa5\xc1\x0c\x4b\x62\xb3\x45\xba\x77\xa0\x04\xcb\x31\x53\x5b\xc4\x09\x06\x7e\x59\x6f\xe1\x4d\x7d\x61\x95\x02\x91\xf4\x59\x4f\xf3\xc6\xc2\x68\x9e\x83\xe1\x22\xe9\x5b\x56\xe3\xf8\xd6\xdf\x70\x1d\x63\xdb\xb3\x8b\xa4\x2e\xcb\x52\x40\x49\x15\x4f\x5a\x49\x23\xea\xc3\x1b\xdb\x2d\x52\xbe\xe2\xf5\x8e\x0a\x78\xe4\x98\xcc\x2d\x98\x29\x1e\x53\x5a\x34\x5b\xa6\xbb\xd5\x81\xdb\x9f\xfe\xdc\xa0\xc9\xfc\x27\x86\x8b\xa4\xbf\x8b\x02\xc4\xa7\x24\xd2\xb9\x86\xb2\xe7\xb0\x90\x46\x93\xe5\x8a\xd7\x4c\x9c\x4a\x16\x4c\x24\x9a\xd6\x68\x91\xe8\xe7\x37\x25\xe8\x15\xaf\x30\x07\x1a\xcb\x72\x5e\x79\x51\x64\xb4\x48\xf4\xa6\xc9\x05\x50\x09\x5f\x39\x4f\x78\xe6\xf0\xac\xd4\x84\x13\xef\x19\x2f\x8c\x87\xa6\x60\x8a\xf1\x86\x56\x5f\xb8\xa8\x29\xce\x47\x38\x5b\x0d\xd8\x7d\xe8\x19\x9e\xa4\x2e\x1d\x58\xa1\x56\xb6\x31\xd5\x50\x1e\x1b\x59\x5a\x7d\xcd\xd1\x05\x76\xb4\x4f\x51\xf0\x9e\x56\xa0\x14\xa4\xe4\xce\x81\x7e\xfb\x18\x6c\x16\xcb\xda\xaf\xa2\xff\x59\xfa\xef\x07\x7f\x98\x89\xe5\x62\xfd\x9b\x66\x0f\x42\xa5\x1c\xb3\x58\x98\x62\x67\xb1\x58\xf3\x89\x56\x6d\x6f\x20\xf6\x06\xf2\x2b\xb8\xe3\x97\x37\xb2\xa6\x25\xfc\x78\xb8\xed\x35\x53\xa3\x59\x2b\x42\xa4\x23\xb3\x19\xe9\x6e\x2e\x4e\x97\x41\xe6\x60\xa3\x0e\x15\x0c\x07\xf0\x09\x25\x0d\x70\x31\x18\x90\x7f\x51\xfc\xf4\xd3\xe3\xcc\x62\x3b\xa3\x96\xec\x85\xed\xdf\xc4\x8e\x78\x7c\xf8\xc9\xc7\x8f\x66\x2c\xfe\xe0\x98\x3f\xd2\xd2\xae\x93\x49\xe6\x50\xb4\x74\x0b\xaa\x24\x17\xe4\x3f\xc7\xa3\xcb\x0e\xd1\xba\xeb\x56\xc7\xe3\x79\xd7\xad\xfe\x76\x3c\x42\x53\x74\xdd\x7f\xc7\xbd\xe9\x36\xba\x8d\xd0\xd4\x96\x6b\x1e\x30\x89\x7a\x0f\x4d\x92\xbe\x62\x90\x0c\x52\x27\x79\x0d\xb4\x15\x8a\x9b\xd1\x7d\x97\x6e\xb6\x31\xee\x35\xe9\xc3\x49\x23\x87\x91\x5e\xc3\xef\xa8\x78\x49\x86\x39\x36\x7c\x90\x3a\x69\x78\x6d\xac\x06\xb6\x92\x7f\xd6\x1e\xf0\x96\x3e\x43\xb2\x00\x56\x06\xf0\x5b\x20\xc7\x2e\x92\x3a\xc9\x5b\x33\x59\x6b\x30\x66\x86\x06\x7f\x71\xc4\x68\x01\x7f\x20\x3a\x1b\xe0\x27\xce\x98\xc9\x79\x59\xef\x2d\x93\xe3\x72\x34\x98\x3c\x31\xe2\xe3\x12\x3e\x25\x25\xe7\xa3\x91\xba\xf7\x02\x72\x26\x19\x0f\x47\x99\x5d\x00\xe2\xed\x49\xb0\x98\x3d\x33\xa7\xd7\x09\x0b\xce\x44\x23\x5a\x5f\x78\x93\x8c\xcd\x86\x37\xe9\xd8\x20\x83\x49\xa1\xcb\x0a\x84\xba\xb9\xf6\x30\xd5\xc5\x8c\x85\x9d\x50\xa4\xa7\x55\x5a\xc5\x1f\x60\x23\x40\x86\x3c\xaa\x4f\x90\x99\x70\x18\x3a\x44\x46\xb3\x49\xc5\x5b\x28\x11\x5a\xd9\x92\x0f\x7f\xcf\x2d\x50\xc0\x83\x64\x55\x92\x61\x4a\x8c\x26\xe5\x92\x43\xa2\x39\x8d\x0d\x27\xab\xb1\x18\x8c\xeb\x3c\x5a\xdb\xf1\xb2\x3e\x76\x5b\xb2\x85\xfc\x25\xdc\x96\x98\x42\x38\x00\x58\x66\xb2\xfa\x57\xc1\xdb\x1d\x6b\x4a\x8f\x97\xbe\xec\x44\x10\x3f\xaf\x93\x88\x24\x0a\xf3\x97\x36\xf9\xcb\x3d\x97\xf1\x7a\x24\x7f\xc9\x76\x5c\xc6\x8b\x2f\x4f\xcf\xaa\x7c\x2e\x4a\x48\x64\x40\x03\x48\xc7\x19\x4c\xdf\x9f\x3d\xde\x85\xe9\xd8\xaa\x3a\xcc\x87\xc3\x67\x1b\x81\x1b\x80\x7d\xcf\xd5\xfd\x54\xe6\x78\x87\xfe\x5c\x26\xbb\xf3\xc8\x4e\x8a\x98\xb5\x15\xc7\xb5\x49\xce\x49\x58\x63\x93\x49\xad\x35\x7b\x47\xc1\x21\x6d\xc9\x89\x04\x6e\x52\xe1\x8e\x8a\x92\x85\x94\x56\xdb\x92\xbf\x51\xf0\xdc\x74\x7f\x9a\x7d\xe8\x49\xb3\x0f\x5d\x30\xe8\x74\xe3\x41\xec\x59\x0e\xee\x5f\xe8\x84\x2d\x66\xee\x7f\xe8\x4d\xdf\x78\x89\xb4\xbb\x35\x4f\x74\xcd\xc5\x7a\x2a\x9a\x5c\xae\x8f\x8f\x34\x3c\x81\xc0\x4b\x89\x9e\xb1\x6c\xef\xb0\x38\xe8\xc8\x6c\x3a\xc1\xd1\x03\x6f\x55\x4f\xb3\x32\x60\x5f\xb5\x6f\x3a\x3d\xa3\xad\x54\xeb\x2d\x7f\xfd\xc6\xe2\x19\xb6\x6e\xa5\xca\xe4\x96\xbf\x66\x5b\x8d\xfa\xf9\x4d\x2d\x17\xa9\x7e\x16\x82\x8b\x01\x5d\xb0\x78\x4f\x39\x58\x2f\xd2\xbe\xa5\x0a\x9a\xfc\x70\x2a\x5e\x39\xa2\xa7\x1e\xed\x17\xc9\x7f\x12\x40\x5f\x0a\xfe\xda\x9c\x3a\x78\x0e\x54\xcf\x05\xae\xb3\xc8\xc9\x35\x93\x4a\xb0\xe7\x56\xa1\x49\x8d\x7e\x0a\xcc\xf6\x5c\xf5\x6a\x2e\xf2\xf6\xe0\x1e\xd5\x6e\x99\x54\xa7\xde\xfc\x93\x5b\x56\x69\xba\xe7\xae\x57\x75\xd2\xdd\x35\x93\xbb\x8a\x1e\xec\x85\x87\x27\x0b\x0b\xfa\xfb\x0c\xff\xdc\xd4\x33\x9d\x7f\x4a\xb8\x17\xb0\x01\x01\x4d\x4c\x01\x26\x8d\x66\xbb\x88\xe3\xeb\x8f\xc4\x7c\x7a\x95\x60\x05\xfc\x1b\x04\xbf\xe2\x6d\x13\x3f\x85\x2d\x2b\x20\x7b\x07\xc1\xb3\xdc\xe2\x7e\xed\xe8\x5b\xcf\xa4\xcd\x86\x96\xb0\x56\x54\xb5\x52\x8f\x66\xf2\x5e\x55\x1b\x32\x93\x86\xb5\x53\x91\x3c\x61\x8d\x55\x5e\xec\x11\xbf\x81\x0d\x78\xb4\x2f\x53\xf8\x5d\x67\xac\xf2\xef\x79\xc4\x8b\xd6\x90\x47\xbc\x84\x8d\x55\xfe\x3d\x8f\xc9\x7e\x7b\xc8\x65\xb2\xfd\x1e\xad\x3e\x7d\x44\xa0\x82\xd6\x12\xa3\xf6\x28\x99\xe2\x3b\x5b\xea\xbf\x07\xad\x39\xbe\xa7\x92\x3c\xde\x50\x39\x66\xd1\x63\x4b\x44\x47\x1f\xe3\x26\x14\x4c\xc4\x46\xd8\x84\x75\xfc\x64\x2c\x37\x2b\xb2\x56\x34\xe9\x89\x29\xfa\xae\x38\x6e\x44\x64\xf4\x14\x38\xfc\xc5\xb7\x75\x23\xd1\x97\x6e\x8a\xf6\xd5\xdd\x93\xff\x23\x20\x73\xba\x83\xab\x2d\x15\x34\xc7\x37\x2a\x63\x4b\x29\x2f\x25\x84\xd6\x57\xb6\xe4\xd7\x4e\xcf\x0d\x04\x81\x3e\xd9\xda\xd7\xeb\x89\x97\xf0\xee\xff\x01\x00\x00\xff\xff\xf0\x05\xea\xea\xba\x20\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 8378, mode: os.FileMode(420), modTime: time.Unix(1573635555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xc9\x6e\xdb\x3c\x10\xbe\xfb\x29\x06\x42\x0e\xff\x0f\xc4\x7e\x80\x02\x3e\xa4\x09\x1c\x14\xe8\x92\x26\x41\x7a\x28\x0a\x81\x96\x46\x0a\x51\x6a\x09\x45\x25\x71\x08\xbe\x7b\xc1\xe1\x26\xdb\x8a\x7b\xa8\x4f\x9c\xf9\xbe\x59\x39\x43\x4b\xe2\xd0\x8d\xb2\x40\xc8\x4a\xa6\x58\xd9\xd5\xb9\xe2\x0d\x6e\x3b\x26\xcb\x0c\xb2\xb2\xcc\xb5\x86\xd5\xa7\x12\x8c\xc9\x40\x2f\x00\x14\x57\x02\xc1\xfd\xd6\x90\x59\xf4\x9e\x54\xc6\x64\x0b\x80\x12\x87\x42\xf2\x5e\xf1\xae\x0d\xf0\xd5\x44\xe5\x48\x12\x59\x99\x77\xad\xd8\x91\x0f\xcb\xb9\x45\x56\x7e\xb3\x8a\xa5\x31\x0b\x00\xad\x5f\xb8\x7a\x84\xd5\xb5\x64\xfd\xe3\x10\x95\x92\xb5\x35\xc2\x0a\x48\xac\x2d\x46\x29\x85\xa4\x66\xd2\x49\xae\xae\xb0\xe2\x2d\xa7\x24\x9c\x3b\x80\x67\xfe\x96\x8a\x78\xe0\x6f\x16\x08\x46\x4b\xe0\x15\xac\x2e\x46\xd5\x0d\x05\x13\x68\x21\x16\x05\x6f\x92\x50\x63\x32\x6b\x82\x6d\xe9\x5d\x07\x07\x37\x12\x0b\x3e\xf8\xa0\x7d\x14\xbc\x83\x84\xbe\xeb\xe0\x5a\x76\x63\x4f\x1d\xa8\xed\x09\xd6\xf0\x53\xeb\xb3\xda\x69\x3f\xac\x03\xc1\x98\xd0\x9d\x33\xde\x96\xf8\x7a\x0e\x67\x28\xb0\x39\x60\xf0\xca\xc3\xc6\x9c\x6b\x4d\xc1\x32\xad\x89\x49\x27\xd2\xfc\x9a\x4f\xe4\xae\xe8\x7a\xa4\x44\x06\x7b\xf2\x89\x0c\x4e\x6b\xc3\x38\xc2\xa9\x44\x12\xe3\x9f\x12\x51\x3b\x77\x1f\xa4\x1d\x48\x5a\xfb\x39\x00\xe8\x99\x40\xa5\x70\x6f\x3e\xc9\x62\x75\xe3\x91\x70\xc7\x91\x9b\x57\x82\xf7\xb3\xdc\x8d\x05\x02\xdf\xcc\xa7\xf3\x85\xc9\xdf\x28\xa9\x31\x56\xe5\x86\x6d\x4f\xe9\xa7\xd6\xdb\x35\x04\xc5\x7c\xd5\xae\xc7\xb4\x48\x56\x48\xf9\x3d\x33\x31\xc6\x61\x7b\x20\x21\x81\x5a\x53\xf8\xcf\x6c\x8b\xc2\xc6\x11\x74\xf0\x64\xa7\x3d\x1a\xaa\x54\xc2\xf1\x21\x16\xe5\x2a\xb8\xc5\xa7\x11\x07\x35\x5b\x82\x74\x58\xac\xe1\x69\xd2\xeb\xef\x23\xca\x5d\x5a\xa4\x98\x27\x95\xb6\x34\x86\xea\x3d\x28\x57\x6b\x9b\x02\x78\xef\xd1\xe4\xa2\xae\x25\xd6\x4c\x75\xd2\x25\x61\x95\x2d\x42\x96\xc1\x7f\x57\x78\x8b\xd5\x9d\x92\xbc\xad\xa7\xbc\xff\x69\x4d\x93\x59\xd8\xd3\xa4\x89\xd1\xc8\xa1\x8d\xba\x3c\x0c\x1b\xe7\x4b\x6b\xdf\x0b\xa7\x89\xbc\xc3\x91\xb3\x96\xb4\xeb\x7e\xc0\xec\xa6\xfb\x63\xd8\xf3\x34\x7a\xfb\xfd\x4e\xc6\x3f\x78\xa9\x1e\xad\xe9\x0b\x1d\xbc\xa1\xd3\x9e\x30\x3b\xdd\xd6\x7d\x9b\x49\x9d\xbe\xf0\xd0\x8a\x08\xb8\x91\xbe\xec\xda\x92\x5e\x4a\x26\x36\x9d\x6c\x98\x1a\x60\x3a\xdc\xef\xc2\xe1\x79\x4e\x2d\x2d\x12\x35\xaf\x88\xbb\xd7\x35\x98\xb6\xed\x74\xd7\xf6\x27\xc4\x7a\x6e\x7a\x26\xa7\xb7\x7c\x99\x34\x69\xfa\x52\x51\x61\x7f\xe6\x97\xea\x38\x40\x6c\xc6\x38\xa8\xae\xf9\x58\x5f\x76\x82\x3c\x17\x24\xe7\xdb\x3a\x2f\x48\x13\xa2\x1f\xd0\xfe\xea\x71\x73\xe8\xb1\x9a\xf5\xb8\x79\xdf\xe3\xf4\xda\x1c\x30\x77\x5a\x24\xea\xf1\xae\xcf\x4b\xc6\x3f\xc0\x53\x5d\xba\xfe\x7b\x6c\x7a\xc1\x14\x3e\x30\xc9\xd9\x56\x60\x7c\xfa\x26\xff\xce\xf6\x3b\xc1\xd3\xf2\x67\xcf\xf3\x37\xdf\xb2\x06\x27\xef\xc5\x57\x2b\x86\xfb\xea\x25\x56\xfc\x15\x26\x7f\x8f\x56\x0c\x68\x89\x15\x1b\x85\x4a\x9f\x15\x4e\x74\xf0\x71\xce\xe6\x4f\x00\x00\x00\xff\xff\x9d\xef\x9f\x64\xda\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2266, mode: os.FileMode(420), modTime: time.Unix(1573635555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/monitor.tmpl":     tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl":   tmplTimeboardTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"monitor.tmpl":     &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl":   &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
